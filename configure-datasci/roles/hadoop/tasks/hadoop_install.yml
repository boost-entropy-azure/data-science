---
- name: Create hadoop Group
  group:
    name: "{{ hadoop_group }}"
    state: present

- name: Create hadoop User
  user:
    name: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    shell: /bin/bash

- name: Add SSH authorized key
  authorized_key:
    user: "{{ hadoop_user }}"
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: Copy private key into place
  template:
    src: "~/.ssh/id_rsa"
    dest: "/home/{{ hadoop_user }}/.ssh/hadoop_rsa"
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group}}"
    mode: 0600

- name: Download hadoop binary package archive
  get_url:
    url: "{{ hadoop_url }}"
    dest: "{{ hadoop_bin_tmp }}"
    timeout: 600

- name: Download the corresponding cryptographic signature file
  get_url:
    url: "{{ hadoop_sig_url }}"
    dest: "{{ hadoop_sig_tmp }}"
    timeout: 600

- name: Download the hadoop PGP keys
  get_url:
    url: "{{ hadoop_keys_url }}"
    dest: "{{ hadoop_keys_tmp }}"
    timeout: 600
  changed_when: False

- name: Import hadoop PGP keys
  shell: gpg --import {{ hadoop_keys_tmp }}
  changed_when: False

- name: Verify hadoop binary package archive authenticity
  shell: gpg --verify {{ hadoop_sig_tmp }} {{ hadoop_bin_tmp }}
  changed_when: False

- name: Extract downloaded hadoop archive
  unarchive:
    copy: no
    creates: /usr/local/hadoop-{{ hadoop_version }}
    dest: /usr/local
    src: "{{ hadoop_bin_tmp }}"
    owner: "{{ hadoop_user}}"
    group: "{{ hadoop_group }}"
  become: true

#idempotent command
- name: rename hadoop
  command:
    cmd: "mv {{ hadoop_home }}-{{ hadoop_version }} {{ hadoop_home }}"
    creates: "{{ hadoop_home }}"
    removes: "{{ hadoop_home }}-{{ hadoop_version }}"

- name: export env variable HADOOP_HOME
  lineinfile:
    dest: /home/hadoop/.bashrc
    regexp: "HADOOP_HOME="
    line: "export HADOOP_HOME={{ hadoop_home }}"

- name: export hadoop PATH
  lineinfile:
    dest: /home/hadoop/.bashrc
    regexp: "PATH="
    line: "export PATH=$PATH:$HADOOP_HOME/bin"

- name: export env variable HADOOP_SSH_OPTS
  lineinfile:
    dest: /home/hadoop/.bashrc
    regexp: "HADOOP_SSH_OPTS="
    line: "export HADOOP_SSH_OPTS=\"-i /home/{{ hadoop_user }}/.ssh/hadoop_rsa\""

# Idempotent way to build a /etc/hosts file with Ansible using your Ansible hosts inventory for a source.
# Will include all hosts the playbook is run on.
# Inspired from http://xmeblog.blogspot.com/2013/06/ansible-dynamicaly-update-etchosts.html

- name: Build hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: "{{ item }}"
    line: "{{ item }}"
    state: present
  with_items: "{{ groups['nodes'] }}"

- name: remove localhost from hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '127.0.1.1'
    state: absent

- name: Create HDFS directories
  file:
    path: "/home/{{ hadoop_user }}/tmp"
    state: directory
    owner: "{{ hadoop_user}}"
    group: "{{ hadoop_group }}"
    mode: 0750

- name: Create Namenode directory
  file:
    path: "/home/{{ hadoop_user }}/hadoop-data/hdfs/namenode"
    state: directory
    owner: "{{ hadoop_user}}"
    group: "{{ hadoop_group }}"
    mode: 0750

- name: Create Datanode directory
  file:
    path: "/home/{{ hadoop_user }}/hadoop-data/hdfs/datanode"
    state: directory
    owner: "{{ hadoop_user}}"
    group: "{{ hadoop_group }}"
    mode: 0750

- name: Create logs directory
  file:
      path: "{{ hadoop_home }}/logs"
      state: directory
      owner: "{{ hadoop_user }}"
      group: "{{ hadoop_group }}"
      mode: 0750

- name: Add the service scripts
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ hadoop_user}}"
    group: "{{ hadoop_group }}"
  with_items:
    - {src: "core-site.xml", dest: "{{ hadoop_home }}/etc/hadoop/core-site.xml"}
    - {src: "hdfs-site.xml", dest: "{{ hadoop_home }}/etc/hadoop/hdfs-site.xml"}
    - {src: "yarn-site.xml", dest: "{{ hadoop_home }}/etc/hadoop/yarn-site.xml"}
    - {src: "mapred-site.xml", dest: "{{ hadoop_home }}/etc/hadoop/mapred-site.xml"}

- name: Update java_home for CentOS
  set_fact: java_home="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64/jre"
  when: ansible_os_family == 'RedHat'

- name: Export JAVA_HOME within hadoop env
  lineinfile:
    dest: "{{ hadoop_home }}/etc/hadoop/hadoop-env.sh"
    regexp: "^export JAVA_HOME="
    line: "export JAVA_HOME={{ java_home }}"

- name: Add Azure libs to HADOOP_CLASSPATH
  lineinfile:
    dest: "{{ hadoop_home }}/etc/hadoop/hadoop-env.sh"
    regexp: "^export HADOOP_CLASSPATH="
    line: "export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:{{ hadoop_home }}/share/hadoop/tools/lib/*"
    state: present

- name: Add Azure tools to hadoop-env.sh
  lineinfile:
    dest: "{{ hadoop_home }}/etc/hadoop/hadoop-env.sh"
    regexp: "^export HADOOP_OPTIONAL_TOOLS="
    line: "export HADOOP_OPTIONAL_TOOLS='hadoop-azure,hadoop-azure-datalake'"
